@page "/chat"
@using Microsoft.Extensions.AI

<PageTitle>Chat</PageTitle>

<style>
    .chat-message {
        height: fit-content;
    }
</style>

<div style="display: flex; flex-direction: column; height: 100%;">
    <div style="flex-grow: 1; overflow-y: scroll;">
        @foreach (var entry in m_ChatHistory)
        {
            if (entry.Role == ChatRole.User)
            {
                <div class="chat-message">
                    User: @entry.Text
                </div>
            }
            else if (entry.Role == ChatRole.Assistant)
            {
                <div class="chat-message">
                    AI: @entry.Text
                </div>
            }
            else if (entry.Role == ChatRole.Tool)
            {
                <div class="chat-message">
                    Tool: @entry.Text
                </div>
            }
        }
    
        @if (response is not null)
        {
            <div>
                AI: @response
            </div>
        }
    </div>

    <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
        <div style="display: flex; flex-direction: row">
            <FluentTextField Style="height: 32px; width: 500px" Placeholder="Type your message..." @onkeydown="OnChatInputAsync"
                             @bind-Value="m_UserInput" Disabled="m_IsGenerating"/>
            <FluentButton Appearance="Appearance.Stealth" OnClick="@CallAi"
                          Title="Send" aria-label="Send" Style="aspect-ratio: 1/1; height: 32px">
                <FluentIcon Value="@(new Icons.Regular.Size24.Send())" Color="Color.Neutral"/>
            </FluentButton>
        </div>
    </div>
</div>



@code{
    private IChatClient? m_ChatClient;

    List<ChatMessage> m_ChatHistory =
    [
        new ChatMessage(ChatRole.System, "Your are a pro mathematician, go and help me out here.")
    ];

    private string? m_UserInput;
    private string? response;
    private bool m_IsGenerating = false;

    protected override void OnInitialized()
    {
        m_ChatClient = new OllamaChatClient(new Uri("http://localhost:26121/"), "llama3.2:latest");
    }

    private async Task OnChatInputAsync(KeyboardEventArgs arg)
    {
        if (arg.Key != "Enter")
            return;

        await CallAi();
    }

    private async Task CallAi()
    {
        if (string.IsNullOrWhiteSpace(m_UserInput))
            return;
        
        if (m_ChatClient is null)
            return;

        m_ChatHistory.Add(new ChatMessage(ChatRole.User, m_UserInput));
        m_UserInput = string.Empty;
        StateHasChanged();

        response = null;

        m_IsGenerating = true;
        await foreach(var item in m_ChatClient.GetStreamingResponseAsync(m_ChatHistory))
        {
            response += item.Text;
            StateHasChanged();
        }
        
        m_IsGenerating = false;
        m_ChatHistory.Add(new ChatMessage(ChatRole.Assistant, response));
        response = null;
    }

}